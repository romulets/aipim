// THIS CODE HAS BEEN AUTO GENERATED BY http://github.com/romulets/aipim
// DON'T CHANGE MANUALLY

// ---------------------------- HELPERS ----------------------------

void addField(Set entities, String fieldName) {
  addValue(entities, field(fieldName).get(null));
}

boolean addValue(Set entities, String value) {
  if (value == null || value == "") {
    return false;
  }

  return entities.add(value);
}

// ---------------------------- FUNCTIONS DEFINITIONS ----------------------------

// ----------------- cloudformation Events -----------------
void enrich_cloudformation(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "cloudformation.amazonaws.com") {
      return;
  }

  if (eventName == "CreateStackSet") {
    addField(enrichCtx.target, "json.responseElements.stackSetId");
  } else if (eventName == "CreateStack") {
    addField(enrichCtx.target, "json.responseElements.stackId");
  }
}

// ----------------- cloudtrail Events -----------------
void enrich_cloudtrail(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "cloudtrail.amazonaws.com") {
      return;
  }

  addField(enrichCtx.related, "json.requestParameters.name");
  addField(enrichCtx.related, "json.requestParameters.s3BucketName");
  addField(enrichCtx.related, "json.responseElements.cloudWatchLogsLogGroupArn");
  addField(enrichCtx.related, "json.responseElements.cloudWatchLogsRoleArn");
  addField(enrichCtx.related, "json.responseElements.kmsKeyId");
  addField(enrichCtx.related, "json.responseElements.snsTopicARN");
  addField(enrichCtx.related, "json.responseElements.trailARN");
  addField(enrichCtx.related, "json.responseElements.name");

  if (eventName == "DeleteTrail") {
    addField(enrichCtx.target, "json.requestParameters.name");
  } else if (eventName == "StopLogging") {
    addField(enrichCtx.target, "json.requestParameters.name");
  } else if (eventName == "DescribeTrails") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- config Events -----------------
void enrich_config(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "config.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.configurationRecorderName");

  if (eventName == "StopConfigurationRecorder" eventName == "StartConfigurationRecorder") {
    addField(enrichCtx.target, "json.requestParameters.configurationRecorderName");
  } else if (eventName == "StartConfigurationRecorder") {
    addField(enrichCtx.target, "json.requestParameters.configurationRecorderName");
  }
}

// ----------------- ec2 Events -----------------
void enrich_ec2(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "ec2.amazonaws.com") {
      return;
  }

  addField(enrichCtx.related, "json.requestParameters.groupId");
  addField(enrichCtx.related, "json.requestParameters.groupName");
  addField(enrichCtx.related, "json.requestParameters.roleName");
  addField(enrichCtx.related, "json.requestParameters.subnetId");
  addField(enrichCtx.related, "json.requestParameters.volumeId");
  addField(enrichCtx.related, "json.requestParameters.networkInterfaceId");
  addField(enrichCtx.related, "json.requestParameters.vpcId");
  addField(enrichCtx.related, "json.requestParameters.snapshotId");
  addField(enrichCtx.related, "json.responseElements.groupId");
  addField(enrichCtx.related, "json.responseElements.reservationId");
  addField(enrichCtx.related, "json.responseElements.vpc.vpcId");
  addField(enrichCtx.related, "json.responseElements.vpc.dhcpOptionsId");
  addField(enrichCtx.related, "json.responseElements.snapshotId");
  addField(enrichCtx.related, "json.responseElements.volumeId");


  if (eventName == "AuthorizeSecurityGroupIngress") {
    addField(enrichCtx.target, "json.requestParameters.groupId");
    field("json.responseElements.securityGroupRuleSet.items").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.securityGroupRuleId));
  } else if (eventName == "AuthorizeSecurityGroupEgress") {
    addField(enrichCtx.target, "json.requestParameters.groupId");
    field("json.responseElements.securityGroupRuleSet.items").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.securityGroupRuleId));
  } else if (eventName == "CreateTrafficMirrorFilter") {
    addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorFilterResponse.trafficMirrorFilter.trafficMirrorFilterId");
  } else if (eventName == "CreateTrafficMirrorFilterRule") {
    addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorFilterRuleResponse.trafficMirrorFilterRule.trafficMirrorFilterRuleId");
  } else if (eventName == "CreateTrafficMirrorSession") {
    addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorSessionResponse.trafficMirrorSession.trafficMirrorSessionId");
  } else if (eventName == "CreateTrafficMirrorTarget") {
    addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorTargetResponse.trafficMirrorTarget.trafficMirrorTargetId");
  } else if (eventName == "DeleteFlowLogs") {
    addField(enrichCtx.target, "json.requestParameters.DeleteFlowLogsRequest.FlowLogId.content");
  } else if (eventName == "DeleteNetworkAcl") {
    addField(enrichCtx.target, "json.requestParameters.networkAclId");
  } else if (eventName == "DeleteNetworkAclEntry") {
    addField(enrichCtx.target, "json.requestParameters.networkAclId");
    addField(enrichCtx.target, "json.requestParameters.ruleNumber");
  } else if (eventName == "GetPasswordData") {
    addField(enrichCtx.target, "json.requestParameters.instanceId");
  } else if (eventName == "ModifyImageAttribute") {
    addField(enrichCtx.target, "json.requestParameters.imageId");
  } else if (eventName == "ModifySnapshotAttribute") {
    addField(enrichCtx.target, "json.requestParameters.snapshotId");
  } else if (eventName == "DescribeSecurityGroups") {
    addField(enrichCtx.target, "json.recipientAccountId");
  } else if (eventName == "DescribeNetworkInterfaces") {
    addField(enrichCtx.target, "json.recipientAccountId");
  } else if (eventName == "DescribeRegions") {
    addField(enrichCtx.target, "json.recipientAccountId");
  } else if (eventName == "DescribeVpcs") {
    addField(enrichCtx.target, "json.recipientAccountId");
  } else if (eventName == "DescribeNetworkAcls") {
    addField(enrichCtx.target, "json.recipientAccountId");
  } else if (eventName == "DescribeVolumes") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- elasticfilesystem Events -----------------
void enrich_elasticfilesystem(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "elasticfilesystem.amazonaws.com") {
      return;
  }

  if (eventName == "DeleteFileSystem") {
    addField(enrichCtx.target, "json.requestParameters.fileSystemId");
  } else if (eventName == "DeleteMountTarget") {
    addField(enrichCtx.target, "json.requestParameters.mountTargetId");
  }
}

// ----------------- events Events -----------------
void enrich_events(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "events.amazonaws.com") {
      return;
  }

  if (eventName == "DeleteRule") {
    addField(enrichCtx.target, "json.requestParameters.name");
  }
}

// ----------------- guardduty Events -----------------
void enrich_guardduty(def enrichCtx, def eventSource, def eventName)  {
  if (eventSource != "guardduty.amazonaws.com") {
      return;
  }

  addField(enrichCtx.related, "json.requestParameters.detectorId");
  addField(enrichCtx.related, "json.responseElements.detectorId");

  if (eventName == "CreateDetector") {
    addField(enrichCtx.target, "json.responseElements.detectorId");
  } else if (eventName == "DeleteDetector") {
    addField(enrichCtx.target, "json.requestParameters.detectorId");
  } 
}

// ----------------- iam Events -----------------
void enrich_iam(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "iam.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.userName");
  addField(enrichCtx.related, "json.requestParameters.serialNumber");
  addField(enrichCtx.related, "json.requestParameters.accessKeyId");
  addField(enrichCtx.related, "json.requestParameters.policyArn");
  addField(enrichCtx.related, "json.requestParameters.roleName");
  addField(enrichCtx.related, "json.requestParameters.policyName");
  addField(enrichCtx.related, "json.requestParameters.serialNumber");
  addField(enrichCtx.related, "json.responseElements.accessKey.userName");
  addField(enrichCtx.related, "json.responseElements.accessKey.accessKeyId");
  addField(enrichCtx.related, "json.responseElements.user.arn");
  addField(enrichCtx.related, "json.responseElements.user.userId");
  addField(enrichCtx.related, "json.responseElements.user.userName");
  addField(enrichCtx.related, "json.responseElements.userId");
  addField(enrichCtx.related, "json.responseElements.role.arn");
  addField(enrichCtx.related, "json.responseElements.serialNumber");

  if (eventName == "AttachGroupPolicy") {
    addField(enrichCtx.target, "json.requestParameters.groupName");
  } else if (eventName == "AttachRolePolicy"){
    addField(enrichCtx.target, "json.requestParameters.roleName");
  } else if (eventName == "ListAttachedRolePolicies"){
    addField(enrichCtx.target, "json.requestParameters.roleName");
  } else if (eventName == "UpdateAssumeRolePolicy") {
    addField(enrichCtx.target, "json.requestParameters.roleName");
  } else if (eventName == "AttachUserPolicy") {
    addField(enrichCtx.target, "json.requestParameters.policyArn");
    addField(enrichCtx.target, "json.requestParameters.userName");
  } else if (eventName == "CreateAccessKey") {
    addField(enrichCtx.target, "json.responseElements.accessKey.accessKeyId");
    addField(enrichCtx.target, "json.requestParameters.userName");
  } else if (eventName == "CreateUser")
    addField(enrichCtx.target, "json.requestParameters.userName");
  } else if (eventName == "DeactivateMFADevice") {
    addField(enrichCtx.target, "json.requestParameters.userName");
  } else if (eventName == "DeleteVirtualMFADevice") {
    addField(enrichCtx.target, "json.requestParameters.serialNumber");
  } else if (eventName == "GetPolicy") {
    addField(enrichCtx.target, "json.requestParameters.policyArn");
  } else if (eventName == "CreatePolicy") {
    addField(enrichCtx.target, "json.responseElements.policy.arn");
  } else if (eventName == "ListRoles") {
    addField(enrichCtx.target, "json.recipientAccountId");
  } else if (eventName == "ListUsers") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- kms Events -----------------
void enrich_kms(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "kms.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.keyId");
  addField(enrichCtx.related, "json.responseElements.keyId");
  addField(enrichCtx.related, "json.responseElements.keyMetadata.arn");
  addField(enrichCtx.related, "json.responseElements.keyMetadata.keyId");

  if (eventName == "DisableKey") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "ScheduleKeyDeletion") {
    field("json.resources").get(new ArrayList())\
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  }
}

// ----------------- lambda Events -----------------
void enrich_lambda(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "lambda.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.functionName");
  addField(enrichCtx.related, "json.responseElements.functionArn");
  addField(enrichCtx.related, "json.responseElements.functionName");
  addField(enrichCtx.related, "json.responseElements.role");
  addField(enrichCtx.related, "json.responseElements.vpcConfig.securityGroupIds");
  addField(enrichCtx.related, "json.responseElements.vpcConfig.subnetIds");

  if (eventName == "AddPermission") {
    addField(enrichCtx.target, "json.requestParameters.functionName");
  } else if (eventName == "ListFunctions") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- logs Events -----------------
void enrich_logs(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "logs.amazonaws.com") {
    return;
  }

  if (eventName == "DeleteLogGroup") {
    addField(enrichCtx.target, "json.requestParameters.logGroupName");
  } else if (eventName == "DeleteLogStream") {
    addField(enrichCtx.target, "json.requestParameters.logStreamName");
  }
}

// ----------------- monitoring Events -----------------
void enrich_monitoring(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "monitoring.amazonaws.com") {
    return;
  }

  if (eventName == "DeleteAlarms") {
    field("json.requestParameters.alarmNames");
  }
}

// ----------------- rds Events -----------------
void enrich_rds(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "rds.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.dBInstanceIdentifier");
  addField(enrichCtx.related, "json.requestParameters.dBInstanceArn");
  addField(enrichCtx.related, "json.responseElements.dBInstanceIdentifier");
  addField(enrichCtx.related, "json.responseElements.dbInstanceArn");
  addField(enrichCtx.related, "json.responseElements.dBSubnetGroup.vpcId");
  addField(enrichCtx.related, "json.responseElements.vpcSecurityGroups.vpcSecurityGroupId");

  if (eventName == "DeleteDBCluster") {
    addField(enrichCtx.target, "json.responseElements.dBClusterArn");
  } else if (eventName == "ModifyDBCluster") {
    addField(enrichCtx.target, "json.responseElements.dBClusterArn");
  } else if (eventName == "StopDBCluster") { 
    addField(enrichCtx.target, "json.responseElements.dBClusterArn");
  } else if (eventName == "DeleteDBInstance") {
      addField(enrichCtx.target, "json.responseElements.dBInstanceArn");
  } else if (eventName == "ModifyDBInstance") {
      addField(enrichCtx.target, "json.responseElements.dBInstanceArn");
  } else if (eventName == "RestoreDBInstanceFromDBSnapshot") {
      addField(enrichCtx.target, "json.responseElements.dBInstanceArn");
  } else if (eventName == "RestoreDBInstanceFromS3") {
      addField(enrichCtx.target, "json.responseElements.dBInstanceArn");
  } else if (eventName == "StopDBInstance") {
    addField(enrichCtx.target, "json.responseElements.dBInstanceArn");
  } else if (eventName == "DeleteGlobalCluster") {
    addField(enrichCtx.target, "json.responseElements.globalClusterArn");
  } else if (eventName == "ModifyDBClusterSnapshotAttribute") {
    addField(enrichCtx.target, "json.responseElements.dBClusterSnapshotIdentifier");
  } else if (eventName == "ModifyDBSnapshotAttribute") {
    addField(enrichCtx.target, "json.responseElements.dBSnapshotIdentifier");
  } else if (eventName == "DescribeDBInstances") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- rolesanywhere Events -----------------
void enrich_rolesanywhere(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "rolesanywhere.amazonaws.com") {
    return;
  }

  if (eventName == "CreateTrustAnchor") {
    addField(enrichCtx.target, "json.responseElements.trustAnchor.trustAnchorArn");
    
  }
}

// ----------------- route53resolver Events -----------------
void enrich_route53Resolver(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "route53resolver.amazonaws.com") {
    return;
  }

  if (eventName == "DeleteResolverQueryLogConfig") {
    addField(enrichCtx.target, "json.responseElements.resolverQueryLogConfig.arn");
  }
}

// ----------------- s3 Events -----------------
void enrich_s3(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "s3.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.bucketName");

  if (eventName == "CopyObject"){
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "PutBucketLogging") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "PutBucketVersioning") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "PutObject") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "GetBucketPolicy") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "ListObjects") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "HeadObject") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "GetObject") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "DeleteObject") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "DeleteBucket") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "PutBucketReplication") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
    addField(enrichCtx.target, "json.requestParameters.ReplicationConfiguration.Rule.Destination.Bucket");
  } else if (eventName == "ListBuckets") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- secretsmanager Events -----------------
void enrich_secretsmanager(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "secretsmanager.amazonaws.com") {
    return;
  }

  if (eventName == "BatchGetSecretValue") {
    field("json.requestParameters.secretIdList")
  } else if (eventName == "GetSecretValue") {
    addField(enrichCtx.target, "json.requestParameters.secretId");
  }
}

// ----------------- signin Events -----------------
void enrich_signin(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "signin.amazonaws.com") {
    return;
  }

  if (eventName == "ConsoleLogin") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- ssm Events -----------------
void enrich_ssm(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "ssm.amazonaws.com") {
    return;
  }

  if (eventName == "GetParameter") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "GetParameters") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "CreateControlChannel") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "OpenControlChannel") {
    field("json.resources").get(new ArrayList())
      .stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
  } else if (eventName == "StartSession") {
    addField(enrichCtx.target, "json.requestParameters.target");
  } else if (eventName == "CreateDocument") {
    addField(enrichCtx.target, "json.requestParameters.name");
  } else if (eventName == "TerminateSession") {
    addField(enrichCtx.target, "json.requestParameters.sessionId");
  } else if (eventName == "OpenDataChannel") {
    addField(enrichCtx.target, "json.requestParameters.sessionId");
  } else if (eventName == "SendCommand") {
    addField(enrichCtx.target, "json.requestParameters.instanceIds")
  } else if (eventName == "ListInstanceAssociations") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- sts Events -----------------
void enrich_sts(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "sts.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.roleArn");
  addField(enrichCtx.related, "json.sourceIdentity");
  addField(enrichCtx.related, "json.additionalEventData.MFAIdentifier");
  addField(enrichCtx.related, "json.responseElements.assumedRoleUser.arn");
  addField(enrichCtx.related, "json.requestParameters.roleSessionName");
  addField(enrichCtx.related, "json.responseElements.accessKeyId");

  if (eventName == "AssumeRole") {
    addField(enrichCtx.target, "json.requestParameters.roleArn");
    addField(enrichCtx.target, "json.userIdentity.invokedBy");
    addField(enrichCtx.target, "json.userIdentity.sessionContext.sessionIssuer.arn");
    addField(enrichCtx.target, "json.userIdentity.arn");
  } else if (eventName == "GetCallerIdentity") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- wafv2 Events -----------------
void enrich_wafv2(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "wafv2.amazonaws.com") {
    return;
  }

  addField(enrichCtx.related, "json.requestParameters.id");
  addField(enrichCtx.related, "json.responseElements.summary");

  if (eventName == "DeleteRuleGroup"){
    addField(enrichCtx.target, "json.requestParameters.id");
  } else if (eventName == "DeleteWebACL") {
    addField(enrichCtx.target, "json.requestParameters.id");
  }
}

// ----------------- sns Events -----------------
void enrich_sns(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "sns.amazonaws.com") {
    return;
  }

  if (eventName == "CreateTopic") {
    addField(enrichCtx.target, "json.responseElements.topicArn");
  } else if (eventName == "Subscribe"){ 
    addField(enrichCtx.target, "json.requestParameters.topicArn");
  } else if (eventName == "Publish") {
    addField(enrichCtx.target, "json.requestParameters.topicArn");
  }
}

// ----------------- bedrock Events -----------------
void enrich_bedrock(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "bedrock.amazonaws.com") {
    return;
  }

  if (eventName == "Converse") {
    addField(enrichCtx.target, "json.requestParameters.modelId");
  }
}

// ----------------- elasticloadbalancing Events -----------------
void enrich_elasticLoadBalancing(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "elasticloadbalancing.amazonaws.com") {
    return;
  }

  if (eventName == "DescribeLoadBalancers") {
    addField(enrichCtx.target, "json.recipientAccountId");
  }
}

// ----------------- dynamodb Events -----------------
void enrich_dynamodb(def enrichCtx, def eventSource, def eventName) {
  if (eventSource != "dynamodb.amazonaws.com") {
    return;
  }

  if (eventName == "ListTables") {
    addField(enrichCtx.target, "json.recipientAccountId");

  }
}

// ---------------------------- BASIC SETUP ----------------------------

// Using tree set to ensure a sorting is kept (testing purposes)
Map enrichCtx = [:];
enrichCtx.related = new TreeSet();
enrichCtx.target = new TreeSet();
enrichCtx.actor = field("json.userIdentity.arn").get(null); // default actor value

addField(enrichCtx.related, "json.userIdentity.accessKeyId");
addField(enrichCtx.related, "json.userIdentity.arn");
addField(enrichCtx.related, "json.userIdentity.userName");
addField(enrichCtx.related, "json.userIdentity.sessionContext.sessionIssuer.arn");
addField(enrichCtx.related, "json.userIdentity.sessionContext.sessionIssuer.userName");
field("json.resources").get(new ArrayList())
  .stream().forEach(f -> addValue(enrichCtx.related, f.ARN));

String eventSource = field("json.eventSource").get(null);
String eventName = field("json.eventName").get(null);

// ---------------------------- FUNCTIONS CALLS ----------------------------

enrichCloudformation(enrichCtx, eventSource, eventName);
enrichCloudtrail(enrichCtx, eventSource, eventName);
enrichConfig(enrichCtx, eventSource, eventName);
enrichEc2(enrichCtx, eventSource, eventName);
enrichElasticFileSystem(enrichCtx, eventSource, eventName);
enrichEvents(enrichCtx, eventSource, eventName);
enrichGuardDuty(enrichCtx, eventSource, eventName);
enrichIam(enrichCtx, eventSource, eventName);
enrichKms(enrichCtx, eventSource, eventName);
enrichLambda(enrichCtx, eventSource, eventName);
enrichLogs(enrichCtx, eventSource, eventName);
enrichMonitoring(enrichCtx, eventSource, eventName);
enrichRds(enrichCtx, eventSource, eventName);
enrichRolesAnywhere(enrichCtx, eventSource, eventName);
enrichRoute53Resolver(enrichCtx, eventSource, eventName);
enrichS3(enrichCtx, eventSource, eventName);
enrichSecretsManager(enrichCtx, eventSource, eventName);
enrichSignin(enrichCtx, eventSource, eventName);
enrichSsm(enrichCtx, eventSource, eventName);
enrichSts(enrichCtx, eventSource, eventName);
enrichWafv2(enrichCtx, eventSource, eventName);
enrichSns(enrichCtx, eventSource, eventName);
enrichBedrock(enrichCtx, eventSource, eventName);
enrichElasticLoadBalancing(enrichCtx, eventSource, eventName);
enrichDynamoDB(enrichCtx, eventSource, eventName);

// ---------------------------- OUTPUT RESULT TO ELASTICSEARCH DOCUMENT  ----------------------------

if (!enrichCtx.target.isEmpty()) {
  field("target.entity.id").set(enrichCtx.target);
  enrichCtx.related.addAll(enrichCtx.target);
}

field("actor.entity.id").set([ enrichCtx.actor ]);

field("related.entity").set(enrichCtx.related);